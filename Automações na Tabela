                              -- Enclementos na Database Concessionaria:





--Essa trigger serve para quando você inserir alguma venda de uma moto da tabela [moto], seja inserido o id da moto pela descrição (nome da moto)

CREATE TRIGGER Inserir_ID_Moto
ON VENDAS
FOR INSERT
AS
BEGIN	
	UPDATE V
	SET Id_Moto = M.Id_Moto
	FROM VENDAS V
	JOIN MOTO M
ON M.Nome = (SELECT Nome_Moto FROM Vendas
WHERE Id_Venda=V.Id_Venda)
END

--Procedure para add funcionario 
CREATE PROCEDURE Adicionar_Funcionario
@Cargo VARCHAR (300),
@Setor VARCHAR (300),
@Salario MONEY,
@Data_Contratacao DATE,
@VT VARCHAR (1),
@VR VARCHAR (1),
@VO VARCHAR (1),
@VA VARCHAR (1)
AS
BEGIN
	INSERT INTO Funcionario (Cargo,Setor,Salario,
	Data_Contratacao,VT,VR,Vo,Va)
VALUES(
	@Cargo ,@Setor ,@Salario ,@Data_Contratacao,@VT ,@VR ,@VO ,@VA 
)

END

-- exemplo:
-- EXEC Adicionar_Funcionario 'Gerente de Sistemas','T.I',35725.93,'2024-01-28',NULL,NULL,'A','A'






--Trigger feita para quando remover o funcionário atravéz da tabela [Dados_Funcionario], remova também os dados da tabela [Funcionário].
--Desta maneira, não havendo nenhum resquicio desse funcionário.


CREATE TRIGGER Remover_Funcionario
ON DADOS_FUNCIONARIO
FOR DELETE
AS
BEGIN
	DELETE	F
		FROM FUNCIONARIO F
		JOIN deleted D
	ON D.ID_FUNCIONARIO = F.ID_FUNCIONARIO	
END;

-- EXEMPLO:
--DELETE DADOS_FUNCIONARIO WHERE ID_FUNCIONARIO =





-- Function para trazer nome da moto (sem precisar fazer joins)
CREATE FUNCTION FC_NOME_MOTO(@ID INT)
RETURNS  TABLE
AS
RETURN(

	SELECT M.Nome
		FROM MOTO M
	WHERE Id_Moto = @ID
);



-- Function para trazer nome do Cliente (sem precisar fazer joins)

CREATE FUNCTION FC_NOME_CLIENTE (@ID INT)
RETURNS TABLE
AS 
RETURN(
	SELECT Nome
		FROM Cliente
	WHERE Id_Cliente =@ID
);








-- INSERIR DADO DE ATUALIZAÇÃO NA TABELA DE MOTO, PARA QUANDO, CADA VEZ QUE FOR ATUALIZADO O VALOR DA MOTO, APARECA A DATA
CREATE TRIGGER Auto_Update_Atualizacao
ON MOTO
AFTER UPDATE
AS
 BEGIN
IF UPDATE (NOME) OR UPDATE (MARCA) OR UPDATE (ANO) OR UPDATE(COR) OR UPDATE(VALOR) 
OR UPDATE(QUANTIDADE) OR UPDATE (CILINDRADA) OR UPDATE(CATEGORIA) OR UPDATE (ID_FORNECEDOR)
 BEGIN
	UPDATE MOTO
	SET Data_Atualizacao = GETDATE()
	FROM MOTO
	JOIN inserted
	ON MOTO.Id_Moto = inserted.Id_Moto
  END
END;




-- FAZER UMA TRIGGER QUE ATUALIZE O VALOR DA MOTO A CADA VEZ QUE O VALOR DO FORNECEDOR ATUALIZAR, ATUALIZE NO ESTOQUE DAS MOTOS

CREATE TRIGGER Atualizar_Preco_Moto_Depara_Fornecedor
ON Precificacao_Fornecedor
FOR UPDATE
AS
	BEGIN
	IF UPDATE(VALOR)
	BEGIN
UPDATE MOTO
	SET Valor = I.Valor  * 1.27
	FROM Moto
	JOIN inserted I
	ON I.Moto = Moto.Nome
	JOIN deleted D
	ON D.Moto = Moto.Nome
	WHERE I.Valor <D.Valor
	END
END;





CREATE TRIGGER Atualizar_Preco_Moto_Depara_Fornecedor2
ON Precificacao_Fornecedor
FOR UPDATE
AS
	BEGIN
	IF UPDATE(VALOR)
	BEGIN
UPDATE MOTO
	SET Valor = I.Valor  * 1.27
	FROM Moto
	JOIN inserted I
	ON I.Moto = Moto.Nome
	JOIN deleted D
	ON D.Moto = Moto.Nome
	WHERE I.Valor > D.Valor
	END
END;
